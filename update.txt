package com.example.travelinsuranceservice.service;
 
import com.example.travelinsuranceservice.client.BookingClient;
import com.example.travelinsuranceservice.client.UserClient;
import com.example.travelinsuranceservice.dto.*;
import com.example.travelinsuranceservice.exception.*;
import com.example.travelinsuranceservice.model.Insurance;
import com.example.travelinsuranceservice.repository.InsuranceRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
 
import java.util.List;
 
/**
 * Service layer for handling all insurance-related logic.
 */
@Service
public class InsuranceService {
 
    private static final Logger logger = LoggerFactory.getLogger(InsuranceService.class);
 
    @Autowired
    private InsuranceRepository repo;
 
    @Autowired
    private UserClient userClient;
 
    @Autowired
    private BookingClient bookingClient;
 
    /**
     * Creates new insurance for the given user and coverage type.
     * Automatically sets issuanceStatus to "ISSUED".
     */
    public Insurance createInsurance(InsuranceRequestDTO dto) {
        logger.info("Creating insurance for userId: {}", dto.getUserId());
 
        // Validate user existence using Feign client
        if (userClient.getUserById(dto.getUserId()) == null) {
            logger.error("Invalid user ID: {}", dto.getUserId());
            throw new InvalidInputException("Invalid user ID: " + dto.getUserId());
        }
 
        Insurance insurance = new Insurance();
        insurance.setUserId(dto.getUserId());
        insurance.setCoverageType(dto.getCoverageType());
        // issuanceStatus and other values set in entity via @PrePersist
 
        Insurance saved = repo.save(insurance);
        logger.info("Insurance created with ID: {}", saved.getInsuranceId());
        return saved;
    }
 
    
 
    /**
     * Returns all insurance policies linked to a specific user.
     */
    public List<Insurance> getUserInsurance(Long userId) {
        logger.info("Fetching insurance list for userId: {}", userId);
        return repo.findByUserId(userId);
    }
    
    /**
    * Returns the price of the insurance selected by the user.
    * If no insurance is found, returns 0.0.
    */
    /**
     * Fetch insurance price by userId
     * If no insurance exists or cancelled, return price as 0.0
     */
    public double getInsurancePriceByUserId(Long userId) {
        Insurance insurance = repo.findByUserId(userId);
 
        if (insurance == null || "CANCELLED".equalsIgnoreCase(insurance.getIssuanceStatus())) {
            return 0.0;
        }
 
        return insurance.getPrice();
    }
 
    /**
     * Update the bookingId in insurance record after successful payment
     * Set status to ACTIVE
     */
    public String updateBookingIdInInsurance(Integer insuranceId, Long bookingId) {
        Insurance insurance = InsuranceRepository.findById(insuranceId).orElse(null);
 
        if (insurance == null) {
            return "❌ Insurance record not found.";
        }
 
        insurance.setBookingId(bookingId);
        insurance.setIssuanceStatus("ACTIVE");
        repo.save(insurance);
 
        return "✅ Insurance linked to booking successfully.";
    }
}







package com.example.travelinsuranceservice.controller;
 
import com.example.travelinsuranceservice.dto.*;
import com.example.travelinsuranceservice.model.CoverageType;
import com.example.travelinsuranceservice.model.Insurance;
import com.example.travelinsuranceservice.repository.InsuranceRepository;
import com.example.travelinsuranceservice.service.InsuranceService;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
 
import java.util.*;
import java.util.stream.Collectors;
 
/**
 * Controller exposing REST endpoints for insurance operations.
 */
@RestController
@RequestMapping("/api/insurance")
public class InsuranceController {
 
    private static final Logger logger = LoggerFactory.getLogger(InsuranceController.class);
 
    @Autowired
    private InsuranceService service;
    
    @Autowired
    private InsuranceRepository repo;
 
    /**
     * POST /api/insurance
     * Creates new insurance with fixed status "ISSUED".
     */
    @PostMapping
    public ResponseEntity<Insurance> createInsurance(@Valid @RequestBody InsuranceRequestDTO dto) {
        logger.info("POST /api/insurance - creating insurance");
        Insurance insurance = service.createInsurance(dto);
        return new ResponseEntity<>(insurance, HttpStatus.CREATED);
    }
 
    /**
     * PUT /api/insurance/internal/{insuranceId}/booking?bookingId={id}
     * Internal-only endpoint used by Booking module to update booking ID.
     */
    @PutMapping("/internal/{insuranceId}/booking")
    public ResponseEntity<Insurance> updateBookingFromBookingModule(
            @PathVariable Integer insuranceId,
            @RequestParam Long bookingId) {
 
        logger.info("PUT /api/insurance/internal/{}/booking?bookingId={} - Called from Booking service",
                insuranceId, bookingId);
        return ResponseEntity.ok(service.updateBookingId(insuranceId, bookingId));
    }
 
    /**
     * GET /api/insurance/user/{userId}
     * Fetches insurance policies for a given user.
     */
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<Insurance>> getByUser(@PathVariable Long userId) {
        logger.info("GET /api/insurance/user/{} - Fetching insurance list", userId);
        return ResponseEntity.ok(service.getUserInsurance(userId));
    }
    
   
 
    /**
     * GET /api/insurance/coverage-plans
     * Returns available coverage options (name, price, details, claim).
     */
    @GetMapping("/coverage-plans")
    public ResponseEntity<List<CoveragePlanDTO>> getCoveragePlans() {
        logger.info("GET /api/insurance/coverage-plans - Fetching all coverage plans");
 
        List<CoveragePlanDTO> plans = Arrays.stream(CoverageType.values())
                .map(type -> new CoveragePlanDTO(
                        type.name(),
                        type.getCoverageDetails(),
                        type.getPrice(),
                        type.getClaimableAmount()))
                .collect(Collectors.toList());
 
        return ResponseEntity.ok(plans);
    }
    
    @PutMapping("/{insuranceId}/booking/{bookingId}")
    public ResponseEntity<String> updateInsuranceBookingId(
            @PathVariable Integer insuranceId, @PathVariable Long bookingId) {
        
        Insurance insurance = repo.findById(insuranceId).orElse(null);
        
        if (insurance == null) {
            return ResponseEntity.badRequest().body("Insurance not found.");
        }
        
        insurance.setBookingId(bookingId);
        insurance.setIssuanceStatus("ACTIVE");
        repo.save(insurance);
        
        return ResponseEntity.ok("Insurance linked to booking successfully.");
    }
    
    /**
    * GET /api/insurance/price/{userId}
    * Fetch insurance price selected by userId
    */
    @GetMapping("/price/{userId}")
    public ResponseEntity<Double> getInsurancePriceByUserId(@PathVariable Long userId) {
    logger.info("GET /api/insurance/price/{} - Fetching insurance price", userId);
     
        double price = service.getInsurancePriceByUserId(userId);
     
        if (price <= 0) {
            logger.warn("No insurance found for userId: {}", userId);
            return ResponseEntity.notFound().build();
        }
     
    logger.info("Insurance price for userId {} is {}", userId, price);
        return ResponseEntity.ok(price);
    }
}

 
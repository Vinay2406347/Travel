package com.example.travelinsuranceservice.exception;
 
import org.springframework.http.*;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;
 
import java.util.*;
 
/**
 * Handles all exceptions across the application in a unified format.
 */
@RestControllerAdvice
public class GlobalExceptionHandler {
 
    // Handles custom not-found exceptions
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<Map<String, String>> handleNotFound(ResourceNotFoundException ex) {
        Map<String, String> error = new HashMap<>();
        error.put("error", ex.getMessage());
        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
    }
 
    // Handles input validation failures (e.g. null fields, missing @Valid values)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, String>> handleValidation(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getFieldErrors()
                .forEach(e -> errors.put(e.getField(), e.getDefaultMessage()));
        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
    }
 
    // Handles invalid user/booking ID validation via Feign clients
    @ExceptionHandler(InvalidInputException.class)
    public ResponseEntity<Map<String, String>> handleInvalidInput(InvalidInputException ex) {
        Map<String, String> error = new HashMap<>();
        error.put("error", ex.getMessage());
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }
 
    // Handles any other unexpected exception
    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, String>> handleGeneral(Exception ex) {
        Map<String, String> error = new HashMap<>();
        error.put("error", "Unexpected error: " + ex.getMessage());
        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
 package com.example.travelinsuranceservice.model;
 
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;
 
import java.time.LocalDateTime;
 
/**
 * Entity representing an insurance policy for travel booking.
 */
@Entity
@Data
public class Insurance {
 
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer insuranceId;
 
    @NotNull(message = "User ID cannot be null")
    private Long userId;
 
    // Booking ID will be updated later from the Booking module
    @Column(name="booking_id")
    private Long bookingId;
 
    @Enumerated(EnumType.STRING)
    @NotNull(message = "Coverage type is required")
    private CoverageType coverageType;
 
    // Fields populated based on coverageType at creation
    private String coverageDetails;
    private Double price;
    private Double claimableAmount;
 
    // Default Status Pending
    @Column(nullable=false)
    private String issuanceStatus = "PENDING";
    
    @Column(nullable=false)
    private String provider="Secure Travel Insurance Co.";
 
    @CreationTimestamp
    private LocalDateTime createdAt;
 
    /**
     * Automatically sets coverageDetails, price, and claimableAmount
     * before saving to DB based on the selected coverageType.
     */
    @PrePersist
    public void setDefaults() {
        if (coverageType != null) {
            this.coverageDetails = coverageType.getCoverageDetails();
            this.price = coverageType.getPrice();
            this.claimableAmount = coverageType.getClaimableAmount();
        }
    }
}
 package com.example.travelinsuranceservice.repository;
 
import com.example.travelinsuranceservice.model.Insurance;
import org.springframework.data.jpa.repository.JpaRepository;
 
import java.util.List;
import java.util.Optional;
 
/**
 * Repository interface for Insurance entity.
 * Extends JpaRepository to get CRUD operations automatically.
 */
public interface InsuranceRepository extends JpaRepository<Insurance, Integer> {
 
    /**
     * Custom finder method to retrieve all insurance records for a given userId.
     * Spring Data JPA automatically generates the query from the method name.
     *
     * @param userId ID of the user
     * @return List of Insurance objects associated with the user
     */
    List<Insurance> findByUserId(Long userId);

	boolean existsByInsuranceId(Integer insuranceId);

	Optional<Insurance> findById(Integer insuranceId);
	
	Optional<Insurance> findByBookingId(Long bookingId);
}
 package com.example.travelinsuranceservice.service;

import com.example.travelinsuranceservice.client.BookingClient;
import com.example.travelinsuranceservice.client.UserClient;
import com.example.travelinsuranceservice.dto.BookingDTO;
import com.example.travelinsuranceservice.dto.InsuranceRequestDTO;
import com.example.travelinsuranceservice.exception.InvalidInputException;
import com.example.travelinsuranceservice.exception.ResourceNotFoundException;
import com.example.travelinsuranceservice.model.CoverageType;
import com.example.travelinsuranceservice.model.Insurance;
import com.example.travelinsuranceservice.repository.InsuranceRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Service class handling business logic for Insurance module.
 */
@Service
public class InsuranceService {

    private static final Logger logger = LoggerFactory.getLogger(InsuranceService.class);

    @Autowired
    private InsuranceRepository repo;

    @Autowired
    private UserClient userClient;

    @Autowired
    private BookingClient bookingClient;

    /**
     * Creates new insurance entry for a user
     * 			
     */
    public Insurance createInsurance(InsuranceRequestDTO dto) {
    	logger.info("Creating insurance for userId: {}", dto.getUserId());
    			//validate that the user exists using module via Feign
    	       if (userClient.getUserById(dto.getUserId()) == null) {
    	           throw new InvalidInputException("Invalid user ID: " + dto.getUserId());
    	       }
    	       //If bookingId is provided, checks if insurance already exists for that booking
    	       
    	       if (dto.getBookingId() != null) {
    	           if (repo.findByBookingId(dto.getBookingId()).isPresent()) {
    	               throw new InvalidInputException("Insurance already exists for this booking.");
    	           }
    	       } else {
    	    	// If bookingId is null (initial selection), check for insurance for this user
    	    	   
    	           List<Insurance> pending = repo.findByUserId(dto.getUserId());
    	           if (!pending.isEmpty()) {
    	               throw new InvalidInputException("Insurance already selected. Complete booking first.");
    	           }
    	       }
    	       //Build the insurance entity
    	       Insurance insurance = new Insurance();
    	       insurance.setUserId(dto.getUserId());
    	       insurance.setCoverageType(CoverageType.valueOf(dto.getCoverageType().toUpperCase()));
    	       
    	       //Save to database
    	       Insurance saved = repo.save(insurance);
    	       logger.info("Insurance created with ID: {}", saved.getInsuranceId());
    	       return saved;
    	  
    	    
    	   }

    /**
     * Returns all insurance records for the given userId.
     */
    public List<Insurance> getUserInsurance(Long userId) {
        logger.info("Fetching insurance list for userId: {}", userId);
        return repo.findByUserId(userId);
    }

    /**
     * Returns the price of the first valid insurance selected by the user.
     * Used by Booking module to calculate total cost.
     */
    public double getInsurancePriceByUserId(Long userId) {
        logger.info("Fetching insurance price for userId: {}", userId);

        List<Insurance> insurances = repo.findByUserId(userId);
        if (insurances.isEmpty()) {
            logger.warn("No insurance found for userId {}", userId);
            return 0.0;
        }

        Insurance insurance = insurances.get(0);

        if ("CANCELLED".equalsIgnoreCase(insurance.getIssuanceStatus())) {
            logger.info("Insurance is cancelled for userId {}", userId);
            return 0.0;
        }

        logger.info("Returning insurance price {} for insuranceId {}", insurance.getPrice(), insurance.getInsuranceId());
        return insurance.getPrice();
    }
    
    public double getInsurancePriceByInsuranceId(Integer insuranceId) {
        logger.info("Fetching insurance price for insuranceId: {}", insuranceId);

        Insurance insurance = repo.findById(insuranceId).orElse(null);

        if (insurance == null) {
            logger.warn("No insurance found for insuranceId {}", insuranceId);
            return 0.0;
        }

        if ("CANCELLED".equalsIgnoreCase(insurance.getIssuanceStatus())) {
            logger.info("Insurance is cancelled for insuranceId {}", insuranceId);
            return 0.0;
        }

        logger.info("Returning insurance price {} for insuranceId {}", insurance.getPrice(), insuranceId);
        return insurance.getPrice();
    }

    /**
     * Called by Booking module after booking/payment is successful.
     * Updates bookingId and sets issuanceStatus = "ISSUED".
     */
    public String updateBookingIdInInsurance(Integer insuranceId, Long bookingId) {
        Insurance insurance = repo.findById(insuranceId)
                .orElseThrow(() -> new ResourceNotFoundException("Insurance not found"));

        BookingDTO booking = bookingClient.getBookingById(bookingId);
        if (booking == null) {
            throw new InvalidInputException("Invalid booking ID: " + bookingId);
        }

        insurance.setBookingId(bookingId);
        insurance.setIssuanceStatus("ISSUED");

        repo.save(insurance);

        return "Insurance linked to booking successfully.";
    }

    /**
     * Validates if the given insurance ID exists in the repository.
     */
    public boolean validateInsuranceId(Integer insuranceId) {
        return repo.existsByInsuranceId(insuranceId);
    }
}


package com.example.travelinsuranceservice.dto;
 
import lombok.Data;
 
/**
* DTO to expose insurance coverage plans to Booking module.
*/
@Data
public class InsuranceRequestDTO {
   
    private Integer insuranceId;
 
    private Long userId;
 
    private Long bookingId;  // To be updated after successful payment
 
    private String coverageDetails;
    
    private String coverageType;
 
    private double price;
 
    private String provider;
 
    private String status;  // e.g., "PENDING", "ISSUED"
}
package com.example.travelinsuranceservice.controller;
 
import com.example.travelinsuranceservice.dto.*;
import com.example.travelinsuranceservice.model.CoverageType;
import com.example.travelinsuranceservice.model.Insurance;
import com.example.travelinsuranceservice.service.InsuranceService;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
 
import java.util.*;
import java.util.stream.Collectors;
 
/**
 * Controller exposing REST end-points for insurance operations.
 */
@RestController
@RequestMapping("/api/insurance")
public class InsuranceController {
 
    private static final Logger logger = LoggerFactory.getLogger(InsuranceController.class);
 
    @Autowired
    private InsuranceService service;
    
 
 
    /**
     * POST /api/insurance
     * Creates new insurance with fixed status "ISSUED".
     */
    @PostMapping
    public ResponseEntity<Insurance> createInsurance(@Valid @RequestBody InsuranceRequestDTO dto) {
        logger.info("POST /api/insurance - creating insurance");
        Insurance insurance = service.createInsurance(dto);
        return new ResponseEntity<>(insurance, HttpStatus.CREATED);
    }
 
 
    /**
     * GET /api/insurance/user/{userId}
     * Fetches insurance policies for a given user.
     */
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<Insurance>> getByUser(@PathVariable Long userId) {
        logger.info("GET /api/insurance/user/{} - Fetching insurance list", userId);
        return ResponseEntity.ok(service.getUserInsurance(userId));
    }
    
   
 
    /**
     * GET /api/insurance/coverage-plans
     * Returns available coverage options (name, price, details, claim).
     */
    @GetMapping("/coverage-plans")
    public ResponseEntity<List<CoveragePlanDTO>> getCoveragePlans() {
        logger.info("GET /api/insurance/coverage-plans - Fetching all coverage plans");
 
        List<CoveragePlanDTO> plans = Arrays.stream(CoverageType.values())
                .map(type -> new CoveragePlanDTO(
                        type.name(),
                        type.getCoverageDetails(),
                        type.getPrice(),
                        type.getClaimableAmount()))
                .collect(Collectors.toList());
 
        return ResponseEntity.ok(plans);
    }
    
    @PutMapping("/{insuranceId}/booking/{bookingId}")
    public ResponseEntity<String> updateInsuranceBookingId(
            @PathVariable Integer insuranceId,
            @PathVariable Long bookingId) {
     
        logger.info("PUT /api/insurance/{}/booking/{} - Linking insurance to booking", insuranceId, bookingId);
     
        String result = service.updateBookingIdInInsurance(insuranceId, bookingId);
     
        return ResponseEntity.ok(result);
    }

     
     
    
    /**
    * GET /api/insurance/price/{userId}
    * Fetch insurance price selected by userId
    */
    @GetMapping("/price/{userId}")
    public ResponseEntity<Double> getInsurancePriceByUserId(@PathVariable Long userId) {
    logger.info("GET /api/insurance/price/{} - Fetching insurance price", userId);
     
        double price = service.getInsurancePriceByUserId(userId);
     
        if (price <= 0) {
            logger.warn("No insurance found for userId: {}", userId);
            return ResponseEntity.notFound().build();
        }
     
    logger.info("Insurance price for userId {} is {}", userId, price);
        return ResponseEntity.ok(price);
    }
    /**
     * GET /api/insurance/price/{insuranceId}
     * Fetch insurance price selected by insuranceId
     */
    @GetMapping("/price/insurance/{insuranceId}")
    public ResponseEntity<Double> getInsurancePriceByInsuranceId(@PathVariable Integer insuranceId) {
        logger.info("GET /api/insurance/price/insurance/{} - Fetching insurance price by insuranceId", insuranceId);

        double price = service.getInsurancePriceByInsuranceId(insuranceId);

        if (price <= 0) {
            logger.warn("No insurance found for insuranceId: {}", insuranceId);
            return ResponseEntity.notFound().build();
        }

        logger.info("Insurance price for insuranceId {} is {}", insuranceId, price);
        return ResponseEntity.ok(price);
    }
    
    @GetMapping("/validate/{insuranceId}")
    public ResponseEntity<Boolean> validateInsurance(@PathVariable Integer insuranceId) {
        boolean exists = service.validateInsuranceId(insuranceId);
        return ResponseEntity.ok(exists);
    }

}

 package com.example.travelinsuranceservice.client;
 
import com.example.travelinsuranceservice.dto.BookingDTO;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
 
/**
* Feign client to communicate with the Booking module.
*/
@FeignClient(name = "TravelBooking-PaymentModule")
public interface BookingClient {
 
    /**
     * Fetch booking details by bookingId from the Booking module.
     * @param bookingId the ID of the booking
     * @return the BookingDTO containing booking information
     */
    @GetMapping("/api/bookings/internal/{id}")
    BookingDTO getBookingById(@PathVariable("id") Long bookingId);
}

import { Component, OnInit } from '@angular/core';
import { InsuranceService } from '../services/insurance.service';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
 
@Component({
  standalone: true,
  selector: 'app-insurance-selection',
  imports: [CommonModule, FormsModule],
  templateUrl: './insurance-selection.component.html',
  styleUrls: ['./insurance-selection.component.css']
})
export class InsuranceSelectionComponent implements OnInit {
  userId = Number(localStorage.getItem("userId") || 0);
  selected = '';
  plans: any[] = [];
  error = '';
  success = '';
 
  constructor(private service: InsuranceService, private router: Router) {}
 
  ngOnInit() {
    this.service.getCoveragePlans().subscribe(data => this.plans = data);
  }
 
  onSelectionChange() {
    if (this.selected) {
      this.error = '';
    }
  }
 
  submit() {
    if (!this.selected) {
      this.error = '⚠️ Please select a coverage type.';
      this.success = '';
      return;
    }
 
    // Step 1: Fetch all insurance records for user
    this.service.getMyInsurances(this.userId).subscribe(existingInsurances => {
      const hasPending = existingInsurances.some(
        insurance => insurance.bookingId === null
      );
 
      // Step 2: Block if pending exists
      if (hasPending) {
        this.error = '⚠️ Insurance already selected. Please complete your booking.';
        this.success = '';
      } else {
        // Step 3: Submit new insurance
        console.log("sending data:",{
          useId:this.userId,
          coverageType:this.selected
        });
        this.service.submitInsurance(this.userId, this.selected).subscribe(() => {
          this.success = '✅ Insurance selected successfully!';
          this.error = '';
          setTimeout(() => this.router.navigate(['/booking']), 2000);
        });
      }
    });
  }
}
 <div class="container">
  <h2>Select Coverage Type</h2>
 
  <div class="plans">
    <div class="plan-card" *ngFor="let plan of plans">
      <div class="radio-group">
        <input
          type="radio"
          name="coverage"
          [value]="plan.coverageType"
          [(ngModel)]="selected"
          (change)="onSelectionChange()"
        />
        <label>{{ plan.coverageType }} – ₹{{ plan.price }}</label>
      </div>
      <p class="description">{{ plan.coverageDetails }}</p>
    </div>
  </div>
 
  <p class="message error" *ngIf="error">{{ error }}</p>
  <p class="message success" *ngIf="success">{{ success }}</p>
 
  <button (click)="submit()">Submit</button>
</div>
 :host {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  max-width: 600px;
  padding: 20px;
  background-color: #ffffff;
  box-shadow: 0 4px 8px rgba(0, 0, 255, 0.2);
  border-radius: 10px;
}

h2 {
  color: #004080;
  margin-bottom: 20px;
  text-align: center;
}

.plans {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.plan-card {
  background-color: #f9f9f9;
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 15px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.radio-group {
  display: flex;
  align-items: center;
  gap: 10px;
  font-weight: bold;
  color: #003366;
  margin-bottom: 5px;
}

input[type="radio"] {
  transform: scale(1.2);
}

.description {
  margin-left: 25px;
  font-size: 14px;
  color: #555;
}

button {
  background-color: #007BFF;
  color: white;
  border: none;
  padding: 10px 20px;
  margin-top: 10px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

button:hover {
  background-color: #0056b3;
}

.message {
  font-weight: bold;
  margin-bottom: 10px;
  text-align: center;
}

.error {
  color: #cc0000;
}

.success {
  color: #006600;
}
import {Injectable} from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
@Injectable({ providedIn: 'root' })
export class InsuranceService {
  private baseUrl = 'http://localhost:8080/api'; // Only defined once
 
  constructor(private http: HttpClient) {}
 
  getAssistanceQueries(userId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/assistance/user/${userId}`);
  }
 
  addQuery(userId: number, issue: string): Observable<any> {
    return this.http.post(`${this.baseUrl}/assistance`, { userId, issueDescription:issue });
  }  
 
  getMyInsurances(userId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/insurance/user/${userId}`);
  }
 
  getCoveragePlans(): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/insurance/coverage-plans`);
  }
 
  submitInsurance(userId: number, coverageType: string): Observable<any> {
    return this.http.post(`${this.baseUrl}/insurance`, { userId, coverageType });
  }
}
 
package com.example.travelinsuranceservice;

// Import required Spring Boot classes
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;

 
/**
 * Main entry point for the Spring Boot Travel Insurance & Assistance module.
 *
 * What this file does:
 * ðŸ”¹ Marks the starting point of the application
 * ðŸ”¹ Enables auto-configuration, component scanning, and bean registration
 * ðŸ”¹ Boots up the Spring application context and starts the embedded server (Tomcat)
 *
 * Annotations used:
 * @SpringBootApplication is a combination of:
 *   - @Configuration: marks this class as a source of bean definitions
 *   - @EnableAutoConfiguration: tells Spring Boot to auto-configure beans based on dependencies
 *   - @ComponentScan: scans this package and all sub-packages for Spring components
 */
@EnableFeignClients(basePackages="com.example.travelinsuranceservice.client")
@SpringBootApplication
@EnableDiscoveryClient //Enables Eureka client functionality
public class TravelInsuranceApplication {
 
    /**
     * Main method that gets executed when the application starts.
     *
     * @param args command-line arguments (optional)
     */
    public static void main(String[] args) {
        // Launch the Spring Boot application
        SpringApplication.run(TravelInsuranceApplication.class, args);
    }
}

 package com.example.travelinsuranceservice.client;
 
import com.example.travelinsuranceservice.dto.BookingDTO;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
 
/**
* Feign client to communicate with the Booking module.
*/
@FeignClient(name = "TravelBooking-PaymentModule")
public interface BookingClient {
 
    /**
     * Fetch booking details by bookingId from the Booking module.
     * @param bookingId the ID of the booking
     * @return the BookingDTO containing booking information
     */
    @GetMapping("/api/bookings/internal/{id}")
    BookingDTO getBookingById(@PathVariable("id") Long bookingId);
}

package com.example.travelinsuranceservice.client;
 
import com.example.travelinsuranceservice.dto.UserDTO;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
 
/**
 * Feign client to communicate with the User module.
 */
@FeignClient(name = "usermanagement-service")
public interface UserClient {
 
    /**
     * Fetch user details by userId from the User module.
     * @param long1 the ID of the user
     * @return the UserDTO containing user information
     */
    @GetMapping("/api/users/internal/customer/{id}")
    UserDTO getUserById(@PathVariable("id") Long userId);
}

 package com.example.travelinsuranceservice.controller;
 
import com.example.travelinsuranceservice.dto.AssistanceRequestDTO;
import com.example.travelinsuranceservice.model.AssistanceRequest;
import com.example.travelinsuranceservice.service.AssistanceRequestService;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
 
import java.util.List;
 
/**
 * Controller for handling assistance-related requests.
 */
@RestController
@RequestMapping("/api/assistance")
public class AssistanceRequestController {
 
    private static final Logger logger = LoggerFactory.getLogger(AssistanceRequestController.class);
 
    @Autowired
    private AssistanceRequestService service;
 
    /**
     * POST /api/assistance
     * Create a new assistance request for a user.
     */
    @PostMapping
    public ResponseEntity<AssistanceRequest> requestHelp(@Valid @RequestBody AssistanceRequestDTO dto) {
        logger.info("Creating assistance request for userId: {}", dto.getUserId());
        AssistanceRequest request = service.createRequest(dto);
        return new ResponseEntity<>(request, HttpStatus.CREATED);
    }
 
    /**
     * PUT /api/assistance/{requestId}/status?status=Resolved
     * Update the status of an assistance request.
     */
    @PutMapping("/{requestId}/status")
    public ResponseEntity<AssistanceRequest> updateStatus(@PathVariable Integer requestId,
                                                   @RequestParam String status) {
        logger.info("Updating assistance status for requestId {} to {}", requestId, status);
        return ResponseEntity.ok(service.updateStatus(requestId, status));
    }
 
    /**
     * GET /api/assistance/user/{userId}
     * Fetch all assistance requests made by a user.
     */
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<AssistanceRequest>> getByUser(@PathVariable Long userId) {
        logger.info("Fetching assistance requests for userId: {}", userId);
        return ResponseEntity.ok(service.getByUser(userId));
    }
}
 
 package com.example.travelinsuranceservice.controller;
 
import com.example.travelinsuranceservice.dto.*;
import com.example.travelinsuranceservice.model.CoverageType;
import com.example.travelinsuranceservice.model.Insurance;
import com.example.travelinsuranceservice.service.InsuranceService;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
 
import java.util.*;
import java.util.stream.Collectors;
 
/**
 * Controller exposing REST end-points for insurance operations.
 */
@RestController
@RequestMapping("/api/insurance")
public class InsuranceController {
 
    private static final Logger logger = LoggerFactory.getLogger(InsuranceController.class);
 
    @Autowired
    private InsuranceService service;
    
 
 
    /**
     * POST /api/insurance
     * Creates new insurance with fixed status "ISSUED".
     */
    @PostMapping
    public ResponseEntity<Insurance> createInsurance(@Valid @RequestBody InsuranceRequestDTO dto) {
        logger.info("POST /api/insurance - creating insurance");
        Insurance insurance = service.createInsurance(dto);
        return new ResponseEntity<>(insurance, HttpStatus.CREATED);
    }
 
 
    /**
     * GET /api/insurance/user/{userId}
     * Fetches insurance policies for a given user.
     */
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<Insurance>> getByUser(@PathVariable Long userId) {
        logger.info("GET /api/insurance/user/{} - Fetching insurance list", userId);
        return ResponseEntity.ok(service.getUserInsurance(userId));
    }
    
   
 
    /**
     * GET /api/insurance/coverage-plans
     * Returns available coverage options (name, price, details, claim).
     */
    @GetMapping("/coverage-plans")
    public ResponseEntity<List<CoveragePlanDTO>> getCoveragePlans() {
        logger.info("GET /api/insurance/coverage-plans - Fetching all coverage plans");
 
        List<CoveragePlanDTO> plans = Arrays.stream(CoverageType.values())
                .map(type -> new CoveragePlanDTO(
                        type.name(),
                        type.getCoverageDetails(),
                        type.getPrice(),
                        type.getClaimableAmount()))
                .collect(Collectors.toList());
 
        return ResponseEntity.ok(plans);
    }
    
    @PutMapping("/{insuranceId}/booking/{bookingId}")
    public ResponseEntity<String> updateInsuranceBookingId(
            @PathVariable Integer insuranceId,
            @PathVariable Long bookingId) {
     
        logger.info("PUT /api/insurance/{}/booking/{} - Linking insurance to booking", insuranceId, bookingId);
     
        String result = service.updateBookingIdInInsurance(insuranceId, bookingId);
     
        return ResponseEntity.ok(result);
    }

     
     
    
    /**
    * GET /api/insurance/price/{userId}
    * Fetch insurance price selected by userId
    */
    @GetMapping("/price/{userId}")
    public ResponseEntity<Double> getInsurancePriceByUserId(@PathVariable Long userId) {
    logger.info("GET /api/insurance/price/{} - Fetching insurance price", userId);
     
        double price = service.getInsurancePriceByUserId(userId);
     
        if (price <= 0) {
            logger.warn("No insurance found for userId: {}", userId);
            return ResponseEntity.notFound().build();
        }
     
    logger.info("Insurance price for userId {} is {}", userId, price);
        return ResponseEntity.ok(price);
    }
    /**
     * GET /api/insurance/price/{insuranceId}
     * Fetch insurance price selected by insuranceId
     */
    @GetMapping("/price/insurance/{insuranceId}")
    public ResponseEntity<Double> getInsurancePriceByInsuranceId(@PathVariable Integer insuranceId) {
        logger.info("GET /api/insurance/price/insurance/{} - Fetching insurance price by insuranceId", insuranceId);

        double price = service.getInsurancePriceByInsuranceId(insuranceId);

        if (price <= 0) {
            logger.warn("No insurance found for insuranceId: {}", insuranceId);
            return ResponseEntity.notFound().build();
        }

        logger.info("Insurance price for insuranceId {} is {}", insuranceId, price);
        return ResponseEntity.ok(price);
    }
    
    @GetMapping("/validate/{insuranceId}")
    public ResponseEntity<Boolean> validateInsurance(@PathVariable Integer insuranceId) {
        boolean exists = service.validateInsuranceId(insuranceId);
        return ResponseEntity.ok(exists);
    }

}

 package com.example.travelinsuranceservice.dto;
 
import jakarta.validation.constraints.NotNull;
import lombok.Data;
 
/**
 * DTO used to receive a new assistance request from the user.
 */
@Data
public class AssistanceRequestDTO {
 
    @NotNull(message = "User ID is required")
    private Long userId;
 
    @NotNull(message = "Issue description is required")
    private String issueDescription;
}
 
package com.example.travelinsuranceservice.dto;
 
import lombok.Data;
 
import java.time.LocalDate;
 
@Data
public class BookingDTO {
    private Long bookingId;
    private Integer userId;
    private Integer packageId;
    private LocalDate startDate;
    private LocalDate endDate;
    private String status;
    private Integer paymentId;
}
 
package com.example.travelinsuranceservice.dto;
 
import lombok.AllArgsConstructor;
import lombok.Data;
 
/**
 * DTO to expose insurance coverage plans to Booking module.
 */
@Data
@AllArgsConstructor
public class CoveragePlanDTO {
    private String coverageType;       // BASIC, STANDARD, PREMIUM
    private String coverageDetails;    // Human-readable description
    private Double price;              // Fixed price per plan
    private Double claimableAmount;    // Max claim amount per plan
}
 
package com.example.travelinsuranceservice.dto;
 
import lombok.Data;
 
/**
* DTO to expose insurance coverage plans to Booking module.
*/
@Data
public class InsuranceRequestDTO {
   
    private Integer insuranceId;
 
    private Long userId;
 
    private Long bookingId;  // To be updated after successful payment
 
    private String coverageDetails;
    
    private String coverageType;
 
    private double price;
 
    private String provider;
 
    private String status;  // e.g., "PENDING", "ISSUED"
}

package com.example.travelinsuranceservice.dto;
 
import lombok.Data;
 
/**
 * Used to receive user details from the User module.
 */
@Data
public class UserDTO {
    private Long id;
    private String name;
    private String email;
    private String role;
}
 
 package com.example.travelinsuranceservice.exception;
 
import org.springframework.http.*;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;
 
import java.util.*;
 
/**
 * Handles all exceptions across the application in a unified format.
 */
@RestControllerAdvice
public class GlobalExceptionHandler {
 
    // Handles custom not-found exceptions
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<Map<String, String>> handleNotFound(ResourceNotFoundException ex) {
        Map<String, String> error = new HashMap<>();
        error.put("error", ex.getMessage());
        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
    }
 
    // Handles input validation failures (e.g. null fields, missing @Valid values)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, String>> handleValidation(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getFieldErrors()
                .forEach(e -> errors.put(e.getField(), e.getDefaultMessage()));
        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
    }
 
    // Handles invalid user/booking ID validation via Feign clients
    @ExceptionHandler(InvalidInputException.class)
    public ResponseEntity<Map<String, String>> handleInvalidInput(InvalidInputException ex) {
        Map<String, String> error = new HashMap<>();
        error.put("error", ex.getMessage());
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }
 
    // Handles any other unexpected exception
    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, String>> handleGeneral(Exception ex) {
        Map<String, String> error = new HashMap<>();
        error.put("error", "Unexpected error: " + ex.getMessage());
        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
 package com.example.travelinsuranceservice.exception;
 
/**
 * Custom exception used when user or booking ID is invalid.
 * Thrown when validation via Feign client fails.
 */
public class InvalidInputException extends RuntimeException {
 
    private static final long serialVersionUID = 1L;
 
    public InvalidInputException(String message) {
        super(message);
    }
}
 
package com.example.travelinsuranceservice.exception;
 
/**
 * Custom exception to be thrown when an entity is not found.
 * Used for insuranceId and requestId not present in DB.
 */
public class ResourceNotFoundException extends RuntimeException {
 
    // Added to avoid serialization warning
    private static final long serialVersionUID = 1L;
 
    /**
     * Constructor that passes the error message to parent RuntimeException.
     *
     * @param message details of the exception
     */
    public ResourceNotFoundException(String message) {
        super(message); // Calls parent class constructor
    }
}
 package com.example.travelinsuranceservice.model;
 
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.Data;
import lombok.NoArgsConstructor;
 
import java.time.LocalDateTime;
 
/**
 * Entity class mapped to 'assistance_request' table.
 * Auto-generates request timestamp and has fixed resolution time.
 */
@Entity
@Data
@NoArgsConstructor
public class AssistanceRequest {
 
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer requestId; // Auto-generated primary key
 
    @NotNull(message = "User ID cannot be null")
    private Long userId; // Provided by external module
 
    @NotNull(message = "Issue description cannot be empty")
    private String issueDescription; // Reason for assistance (e.g. Lost passport)
 
    private String status = "Active"; // Default status at creation
 
    private String resolutionTime = "24 hours"; // Always fixed
 
    private LocalDateTime requestTimestamp; // Date + time of request
 
    /**
     * Automatically sets the time-stamp before insertion.
     */
    @PrePersist
    public void setRequestTimestamp() {
        this.requestTimestamp = LocalDateTime.now();
    }
}
 package com.example.travelinsuranceservice.model;
 
import lombok.Getter;
 
/**
 * Enum to represent predefined coverage types.
 * Each type has fixed coverage details, price, and claimable amount.
 * Lombok @Getter is used to generate getter methods for each field.
 */
@Getter
public enum CoverageType {
 
    BASIC("Covers emergency medical expenses and trip cancellation for domestic travel.", 500.0, 100000.0),
    STANDARD("Includes medical coverage, trip cancellation, lost baggage, and flight delay protection.", 1000.0, 200000.0),
    PREMIUM("Comprehensive coverage including international medical support, evacuation, trip interruption, and personal liability", 2000.0, 500000.0);
 
    private final String coverageDetails;
    private final Double price;
    private final Double claimableAmount;
 
    /**
     * Constructor to initialize enum values.
     *
     * @param coverageDetails description of coverage
     * @param price price of the coverage
     * @param claimableAmount amount claimable under this plan
     */
    CoverageType(String coverageDetails, Double price, Double claimableAmount) {
        this.coverageDetails = coverageDetails;
        this.price = price;
        this.claimableAmount = claimableAmount;
    }
}
 package com.example.travelinsuranceservice.model;
 
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;
 
import java.time.LocalDateTime;
 
/**
 * Entity representing an insurance policy for travel booking.
 */
@Entity
@Data
public class Insurance {
 
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer insuranceId;
 
    @NotNull(message = "User ID cannot be null")
    private Long userId;
 
    // Booking ID will be updated later from the Booking module
    @Column(name="booking_id")
    private Long bookingId;
 
    @Enumerated(EnumType.STRING)
    @NotNull(message = "Coverage type is required")
    private CoverageType coverageType;
 
    // Fields populated based on coverageType at creation
    private String coverageDetails;
    private Double price;
    private Double claimableAmount;
 
    // Default Status Pending
    @Column(nullable=false)
    private String issuanceStatus = "PENDING";
    
    @Column(nullable=false)
    private String provider="Secure Travel Insurance Co.";
 
    @CreationTimestamp
    private LocalDateTime createdAt;
 
    /**
     * Automatically sets coverageDetails, price, and claimableAmount
     * before saving to DB based on the selected coverageType.
     */
    @PrePersist
    public void setDefaults() {
        if (coverageType != null) {
            this.coverageDetails = coverageType.getCoverageDetails();
            this.price = coverageType.getPrice();
            this.claimableAmount = coverageType.getClaimableAmount();
        }
    }
}
 package com.example.travelinsuranceservice.repository;
 
import com.example.travelinsuranceservice.model.AssistanceRequest;
import org.springframework.data.jpa.repository.JpaRepository;
 
import java.util.List;
 
/**
 * Repository interface for AssistanceRequest entity.
 * Provides CRUD operations and custom method to search by userId.
 */
public interface AssistanceRequestRepository extends JpaRepository<AssistanceRequest, Integer> {
 
    /**
     * Returns all assistance requests submitted by a specific user.
     *
     * @param userId ID of the user
     * @return List of AssistanceRequest objects
     */
    List<AssistanceRequest> findByUserId(Long userId);
}
 package com.example.travelinsuranceservice.repository;
 
import com.example.travelinsuranceservice.model.Insurance;
import org.springframework.data.jpa.repository.JpaRepository;
 
import java.util.List;
import java.util.Optional;
 
/**
 * Repository interface for Insurance entity.
 * Extends JpaRepository to get CRUD operations automatically.
 */
public interface InsuranceRepository extends JpaRepository<Insurance, Integer> {
 
    /**
     * Custom finder method to retrieve all insurance records for a given userId.
     * Spring Data JPA automatically generates the query from the method name.
     *
     * @param userId ID of the user
     * @return List of Insurance objects associated with the user
     */
    List<Insurance> findByUserId(Long userId);
    
    List<Insurance> findByUserIdAndBookingIdIsNull(Long userId);

	boolean existsByInsuranceId(Integer insuranceId);

	Optional<Insurance> findById(Integer insuranceId);
	
	Optional<Insurance> findByBookingId(Long bookingId);
}
 package com.example.travelinsuranceservice.service;
 
import com.example.travelinsuranceservice.client.UserClient;
import com.example.travelinsuranceservice.dto.AssistanceRequestDTO;
import com.example.travelinsuranceservice.exception.*;
import com.example.travelinsuranceservice.model.AssistanceRequest;
import com.example.travelinsuranceservice.repository.AssistanceRequestRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
 
import java.util.List;
 
/**
 * Business logic for managing Assistance requests.
 */
@Service
public class AssistanceRequestService {
 
    private static final Logger logger = LoggerFactory.getLogger(AssistanceRequestService.class);
 
    @Autowired
    private AssistanceRequestRepository repo;
 
    @Autowired
    private UserClient userClient;
 
    /**
     * Validates user and creates a new assistance request.
     */
    public AssistanceRequest createRequest(AssistanceRequestDTO dto) {
        logger.info("Validating userId: {}", dto.getUserId());
        if (userClient.getUserById(dto.getUserId()) == null) {
            logger.error("Invalid userId: {}", dto.getUserId());
            throw new InvalidInputException("Invalid user ID: " + dto.getUserId());
        }
 
        AssistanceRequest request = new AssistanceRequest();
        request.setUserId(dto.getUserId());
        request.setIssueDescription(dto.getIssueDescription());
 
        logger.info("Saving new assistance request for userId: {}", dto.getUserId());
        return repo.save(request);
    }
 
    /**
     * Updates the status of an existing assistance request.
     */
    public AssistanceRequest updateStatus(Integer requestId, String status) {
        AssistanceRequest req = repo.findById(requestId)
                .orElseThrow(() -> new ResourceNotFoundException("Request not found: " + requestId));
        req.setStatus(status);
        logger.info("Updated status for requestId {} to {}", requestId, status);
        return repo.save(req);
    }
 
    /**
     * Fetches all assistance records for a specific user.
     */
    public List<AssistanceRequest> getByUser(Long userId) {
        logger.info("Fetching assistance list for userId: {}", userId);
        return repo.findByUserId(userId);
    }
}
 package com.example.travelinsuranceservice.service;

import com.example.travelinsuranceservice.client.BookingClient;
import com.example.travelinsuranceservice.client.UserClient;
import com.example.travelinsuranceservice.dto.BookingDTO;
import com.example.travelinsuranceservice.dto.InsuranceRequestDTO;
import com.example.travelinsuranceservice.exception.InvalidInputException;
import com.example.travelinsuranceservice.exception.ResourceNotFoundException;
import com.example.travelinsuranceservice.model.CoverageType;
import com.example.travelinsuranceservice.model.Insurance;
import com.example.travelinsuranceservice.repository.InsuranceRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

/**
 * Service class handling business logic for Insurance module.
 */
@Service
public class InsuranceService {

    private static final Logger logger = LoggerFactory.getLogger(InsuranceService.class);

    @Autowired
    private InsuranceRepository repo;

    @Autowired
    private UserClient userClient;

    @Autowired
    private BookingClient bookingClient;

    /**
     * Creates new insurance entry for a user
     * 			
     */
    public Insurance createInsurance(InsuranceRequestDTO dto) {
    	logger.info("Creating insurance for userId: {}, coverageType: {}", dto.getUserId(), dto.getCoverageType());
    	 
    	        // Step 1: Validate user via UserClient (Feign)
    	        if (userClient.getUserById(dto.getUserId()) == null) {
    	            throw new InvalidInputException("Invalid user ID: " + dto.getUserId());
    	        }
    	 
    	        // Step 2: If bookingId is present, check for duplicate insurance for that booking
    	        if (dto.getBookingId() != null) {
    	            Optional<Insurance> existing = repo.findByBookingId(dto.getBookingId());
    	            if (existing.isPresent()) {
    	                throw new InvalidInputException("Insurance already exists for this booking.");
    	            }
    	        } 
    	        else {
    	            // Step 3: If bookingId is not present (user hasn't booked yet), block if they already selected insurance
    	            if (!repo.findByUserIdAndBookingIdIsNull(dto.getUserId()).isEmpty()) {
    	                throw new InvalidInputException("You already have a pending insurance. Please complete booking first.");
    	            }
    	        }
    	 
    	        // Step 4: Create Insurance entity with selected coverage
    	        Insurance insurance = new Insurance();
    	        insurance.setUserId(dto.getUserId());
    	 
    	        // Only set bookingId if present (initially it may be null)
    	        if (dto.getBookingId() != null) {
    	            insurance.setBookingId(dto.getBookingId());
    	        }
    	 
    	        // Set coverage fields from enum
    	        CoverageType type = CoverageType.valueOf(dto.getCoverageType().toUpperCase());
    	        insurance.setCoverageType(type);
    	        insurance.setCoverageDetails(type.getCoverageDetails());
    	        insurance.setPrice(type.getPrice());
    	        insurance.setClaimableAmount(type.getClaimableAmount());
    	 
    	        insurance.setIssuanceStatus("PENDING"); // initial status
    	 
    	        // Step 5: Save and return
    	        Insurance saved = repo.save(insurance);
    	logger.info("Insurance created with ID: {}", saved.getInsuranceId());
    	        return saved;
    	    }

    /**
     * Returns all insurance records for the given userId.
     */
    public List<Insurance> getUserInsurance(Long userId) {
        logger.info("Fetching insurance list for userId: {}", userId);
        return repo.findByUserId(userId);
    }

    /**
     * Returns the price of the first valid insurance selected by the user.
     * Used by Booking module to calculate total cost.
     */
    public double getInsurancePriceByUserId(Long userId) {
        logger.info("Fetching insurance price for userId: {}", userId);

        List<Insurance> insurances = repo.findByUserId(userId);
        if (insurances.isEmpty()) {
            logger.warn("No insurance found for userId {}", userId);
            return 0.0;
        }

        Insurance insurance = insurances.get(0);

        if ("CANCELLED".equalsIgnoreCase(insurance.getIssuanceStatus())) {
            logger.info("Insurance is cancelled for userId {}", userId);
            return 0.0;
        }

        logger.info("Returning insurance price {} for insuranceId {}", insurance.getPrice(), insurance.getInsuranceId());
        return insurance.getPrice();
    }
    
    public double getInsurancePriceByInsuranceId(Integer insuranceId) {
        logger.info("Fetching insurance price for insuranceId: {}", insuranceId);

        Insurance insurance = repo.findById(insuranceId).orElse(null);

        if (insurance == null) {
            logger.warn("No insurance found for insuranceId {}", insuranceId);
            return 0.0;
        }

        if ("CANCELLED".equalsIgnoreCase(insurance.getIssuanceStatus())) {
            logger.info("Insurance is cancelled for insuranceId {}", insuranceId);
            return 0.0;
        }

        logger.info("Returning insurance price {} for insuranceId {}", insurance.getPrice(), insuranceId);
        return insurance.getPrice();
    }

    /**
     * Called by Booking module after booking/payment is successful.
     * Updates bookingId and sets issuanceStatus = "ISSUED".
     */
    public String updateBookingIdInInsurance(Integer insuranceId, Long bookingId) {
        Insurance insurance = repo.findById(insuranceId)
                .orElseThrow(() -> new ResourceNotFoundException("Insurance not found"));

        BookingDTO booking = bookingClient.getBookingById(bookingId);
        if (booking == null) {
            throw new InvalidInputException("Invalid booking ID: " + bookingId);
        }

        insurance.setBookingId(bookingId);
        insurance.setIssuanceStatus("ISSUED");

        repo.save(insurance);

        return "Insurance linked to booking successfully.";
    }

    /**
     * Validates if the given insurance ID exists in the repository.
     */
    public boolean validateInsuranceId(Integer insuranceId) {
        return repo.existsByInsuranceId(insuranceId);
    }
}


